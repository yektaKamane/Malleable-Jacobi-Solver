module comlib {
  //  initproc void initComlibManager();

  message ComlibDummyMsg;
  //  message PrioMsg;
  message ComlibMulticastMsg {
    ComlibMulticastIndexCount indicesCount[];
    CkArrayIndexMax indices[];
    char usrMsg[];
  };

  group [migratable] ComlibManager {
    entry ComlibManager();

    entry void barrier(void);
    entry void resumeFromSetupBarrier();
    //entry void barrier2(void);
    //entry void resumeFromBarrier2(void);
    //entry void receiveTable(StrategyWrapper sw, 
    //			    CkHashtableT<ClibGlobalArrayIndex, int>);

//    entry void bracketedFinishSetup(int instid);
    entry void bracketedReceiveCount(int instid, int pe, int count, int isFirst, int step);
    entry void bracketedStartErrorRecoveryProcess(int instid, int step);	 
    entry void bracketedErrorDetected(int instid, int step);
    entry void bracketedConfirmCount(int instid);
    entry void bracketedCountConfirmed(int instid, int count, int step);
    entry void bracketedReceiveNewCount(int instid);
    entry void bracketedDiscover(int instid, CkArrayID aid, CkArrayIndexMax &idx, int isSrc);
    entry void bracketedContributeDiscovery(int instid, int pe, int nsrc, int ndest, int step);
    entry void bracketedReceiveNewPeList(int instid, int count[CkNumPes()]);
    entry void bracketedReleaseCount(int instid);
    entry void bracketedReleaseBufferedMessages(int instid);



    //entry void receiveRemoteSend(CkQ<CharmMessageHolder *> &remoteQ, int id);
    entry void collectStats(ComlibLocalStats s, int src);
    //			    CkVec<ClibGlobalArrayIndex>);
  }

  mainchare ComlibManagerMain {
    entry ComlibManagerMain();	
  }

  //PUPable CharmStrategy;
  //PUPable MessageHolder;
  //PUPable CharmMessageHolder;
 //  PUPable ComlibArrayListener;

  PUPable EachToManyMulticastStrategy;	
  PUPable DirectMulticastStrategy;
  PUPable RingMulticastStrategy;	
  PUPable MultiRingMulticastStrategy;
  PUPable RectMulticastStrategy;
  PUPable BroadcastStrategy;
  PUPable PrioStreaming;
  PUPable PipeBroadcastStrategy;
 

// PUPable DummyStrategy;
//  PUPable NodeMulticast;
//  PUPable StreamingStrategy;
//  PUPable MPIStrategy;
//  PUPable MeshStreamingStrategy;
  
  //Strategy pupable defined in the array manager code, along with the
  //array listener code
};
