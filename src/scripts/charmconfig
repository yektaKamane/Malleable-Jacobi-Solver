#!/bin/sh
##############################################################################
# charmconfig: Generates Charm++ conv-mach-auto.h file, by compiling
# various small test programs with the current compiler.
#
# Orion Sky Lawlor, olawlor@acm.org, 12/20/2000
#
##############################################################################

echo "Building charm++ configuration file..."

if [ ! -r ./conv-mach.sh ]
then
	echo "Cannot find ./conv-mach.sh"
	exit 1
fi
. ./conv-mach.sh

t="test.cpp"
o="conv-autoconfig.h"

# Write the conv-autoconfig.h header
echo "/* Automatically generated by charmconfig on" `date` > $o
echo " * The C++ compiler was $CMK_CXX */" >> $o
version=`pwd | awk -F/ '{print $(NF-1)}'`
echo '#define CMK_MACHINE_NAME     "'$version'"' >> $o


# Test: tries to compile C++ file $t (described by $1).
#  If successful, prints $2 and sets $pass/clears $fail
#  If failure, prints $3 and sets $pass/clears $fail
test_cxx() {
	printf "$1... "
	$CMK_CXX -I../include -c $t -o test.o > /dev/null 2>&1
	if [ $? -eq 0 ]
	then
		echo "$2"
		pass="1"
		fail="0"
	else
		echo "$3"
		pass="0"
		fail="1"
	fi
}

test_finish() {
	rm -f $t test.o	> /dev/null 2>&1
	return $1
}

cat > $t <<EOT
#include <stdio.h>
void foo(void) {
	printf("Hello, world!\n");
}
EOT
test_cxx "Testing whether C++ compiler works" "ok" "no"
if [ $fail -eq 1 ]
then
	echo "Cannot compile C++ programs with $CMK_CXX"
	echo " (check your charm++ version)"
	test_finish 1
fi


# Perform the tests

cat > $t <<EOT
#include <stdlib.h>
bool foo(void) { return true; }
EOT
test_cxx "Testing whether C++ bool works" "ok" "no"
echo "#define CMK_BOOL_DEFINED              $pass" >> $o
echo "#define CMK_BOOL_UNDEFINED            $fail" >> $o

cat > $t <<EOT
int foo(float *t) {return *reinterpret_cast<int *>(t);}
EOT
test_cxx "Testing whether C++ *_casts<> work" "ok" "no"
echo "#define CMK_CPP_CAST_LEGAL            $pass" >> $o
echo "#define CMK_CPP_CAST_ILLEGAL          $fail" >> $o


cat > $t <<EOT
typedef void (*func_t)(void);
class foo {
public:
	template<func_t f> //Templated member function
	void memb(void) {f();}
};
void myfunc(void)
{
  foo x;
  x.template memb<myfunc>();
}
EOT
test_cxx "Testing whether templated member functions work" "ok" "no"
echo "#define CMK_TEMPLATE_MEMBERS_BROKEN   $fail" >> $o


cat > $t <<EOT
#include <iostream>
void foo(void) {}
EOT
test_cxx "Testing whether including STL <foo> works" "ok" "no"
echo "#define CMK_STL_USE_DOT_H             $fail" >> $o
echo "#define CMK_STL_DONT_USE_DOT_H        $pass" >> $o

cat > $t <<EOT
namespace foo {
	int x;
};
EOT
test_cxx "Testing whether namespaces work" "ok" "no"
echo "#define CMK_NAMESPACES_BROKEN         $fail" >> $o

test_finish 0

