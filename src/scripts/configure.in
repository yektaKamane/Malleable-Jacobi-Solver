
AC_INIT(./Makefile)

AC_CONFIG_HEADER(conv-autoconfig.h)

CHARMINC="."
test -r ./conv-mach-pre.sh && . ./conv-mach-pre.sh

if test ! -r ./conv-mach.sh 
then
        echo "Cannot find ./conv-mach.sh"
        exit 1
fi
. ./conv-mach.sh

test -r ./conv-mach-opt.sh && . ./conv-mach-opt.sh

VERSION=050606
AC_DEFINE_UNQUOTED(CHARM_VERSION, $VERSION)

AC_MSG_CHECKING(machine name)
version=`pwd | awk -F/ '{print $(NF-1)}'`
base_version=`cat .vdir`
AC_DEFINE_UNQUOTED(CMK_MACHINE_NAME, "$version")
AC_MSG_RESULT($version)

t="test.cpp"

# If the test suceeded, print $2 and set "pass"/clear "fail"
# If the test failed, print $3 and clear "pass"/set "fail"
test_result() {
	if test $? -eq 0
	then
                AC_MSG_RESULT("$2")
		pass="1"
		fail="0"
	else
                AC_MSG_RESULT("$3")
		pass="0"
		fail="1"
# For debugging the configure script, just "export autoconf_debug=1"
#  to get this verbose data on any failed tests:
		if test ! -z "$autoconf_debug"
		then
			echo "------- test script for $1 failed:"
			cat out
			echo "------- the test program was:"
			cat $t
			echo "-------"
		fi
	fi
}

# Test: tries to compile C++ file $t (described by $1).
#  If successful, prints $2 and sets $pass/clears $fail
#  If failure, prints $3 and sets $pass/clears $fail
#  additional arguments to c++ compiler are passed as $4
test_cxx() {
        AC_MSG_CHECKING("$1")
	$CMK_CXX -I../include -I. -c $t -o test.o $4 > out 2>&1
	test_result "$1" "$2" "$3"
 	strictpass=$pass
	strictfail=$fail
        if test $pass -eq 1
	then 
 	  if cat out | grep -i "warn" > /dev/null 2>&1
	  then 
	    strictpass="0" && strictfail="1"
          fi
        fi
	/bin/rm -f out
}
# Testlink: tries to compile and link a C++ file $t (described by $1).
#  If successful, prints $2 and sets $pass/clears $fail
#  If failure, prints $3 and sets $pass/clears $fail
#  additional arguments to c++ compiler are passed as $4
test_link() {
        AC_MSG_CHECKING("$1")
	$CMK_CXX -I../include -I. $t -o testlink $4 > out 2>&1
	test_result "$1" "$2" "$3"
	/bin/rm -f out
}

test_finish() {
	rm -f $t testlink test.o	> /dev/null 2>&1
	/bin/rm -f out
	exit $1
}

# try to decide the version of glibc
get_glibc_version() {
t=test.c
cat > $t <<EOT
#include <stdio.h>
#include <gnu/libc-version.h>
int main (void) { puts (gnu_get_libc_version ()); return 0; }
EOT
gcc -o gver test.c
GLIBCVERSION=`./gver`
/bin/rm -f $t gver
}

cat > $t <<EOT
#include <stdio.h>
void foo(void) {
	printf("Hello, world!\n");
}
EOT
echo "set C++ compiler as: $CMK_CXX"
test_cxx "whether C++ compiler works" "ok" "no" ""
if test $fail -eq 1
then
	echo "Cannot compile C++ programs with $CMK_CXX"
	echo " (check your charm++ version)"
	test_finish 1
fi


# Perform the tests

#### Check bool ####
cat > $t <<EOT
#include <stdlib.h>
bool foo(void) { return true; }
EOT
test_cxx "whether C++ bool works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_BOOL_DEFINED, $pass)

#### Check long long ####
cat > $t <<EOT
#include <stdlib.h>
long long foo(void) { return 17; }
EOT
test_cxx "whether long long works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_LONG_LONG_DEFINED, $pass)

#### Check __int64 ####
cat > $t <<EOT
#include <stdlib.h>
__int64 foo(void) { return 17; }
EOT
test_cxx "whether __int64 works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK___int64_DEFINED, $pass)

#### Check long double ####
cat > $t <<EOT
#include <stdlib.h>
long double foo(void) { return 17.0; }
EOT
test_cxx "whether long double works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_LONG_DOUBLE_DEFINED, $pass)

###################### C++ Compiler Features #####################

#### check explicit ####
cat > $t <<EOT
#include <stdlib.h>
class er {
 protected:
   explicit er(unsigned int inType) {};
};
EOT
test_cxx "whether C++ class explicit keyword works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_EXPLICIT, $pass)

#### check if signed char is same as char ####
cat > $t <<EOT
#include <stdlib.h>
class er {
 protected:
   void operator()(char &v,const char *desc=NULL) {};
   void operator()(signed char &v,const char *desc=NULL) {};
};
EOT
test_cxx "whether C++ signed char and char differ" "yes" "no" ""
AC_DEFINE_UNQUOTED(CMK_SIGNEDCHAR_DIFF_CHAR, $pass)

#### check if C++ casts work ####
cat > $t <<EOT
int foo(float *t) {return *reinterpret_cast<int *>(t);}
EOT
test_cxx "whether C++ *_casts<> work" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_CPP_CAST_LEGAL, $pass)
AC_DEFINE_UNQUOTED(CMK_CPP_CAST_ILLEGAL, $fail)


#### check if templated members work ####
cat > $t <<EOT
typedef void (*func_t)(void);
class foo_foo {
protected:
        int len;
};
class foo: public foo_foo {
public:
	template<func_t f> //Templated member function
	void memb(void) {f(); len++;}
};
inline void fn() {}
void myfunc()
{
  foo x;
  x.template memb<fn>();
}
EOT
test_cxx "whether templated member functions work" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_TEMPLATE_MEMBERS_BROKEN, $fail)

##### check if the stl headers use .h #####
cat > $t <<EOT
#include <iostream>
void foo(void) {}
EOT
test_cxx "whether including STL <foo> works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_STL_USE_DOT_H, $fail)
AC_DEFINE_UNQUOTED(CMK_STL_DONT_USE_DOT_H, $pass)

#### check if std::vector works ######
cat > $t <<EOT
#include <vector>

int foo(void) {
  std::vector<int> v;      
  v.push_back(2); v.push_back(3);
  std::vector<int>::iterator it=v.begin();
  it++;
  return *it;
}
EOT
test_cxx "whether the std:: names for STL work" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_USE_STL, $pass)

#### check if namespaces can be defined #####
cat > $t <<EOT
namespace foo {
	int x;
};
EOT
test_cxx "whether namespaces work" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_NAMESPACES_BROKEN, $fail)


#### check if typeinfo exists and works #####
cat > $t <<EOT
#include <typeinfo>
const char *foo(void) {
	int x;
	return typeid(x).name();
}
EOT
test_cxx "whether typeinfo/typeid works" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_HAS_TYPEINFO, $pass)


#### test if we can have multiple delete like this ####
cat > $t <<EOT
class foo {
public:
  void operator delete(void*p){};
  void operator delete(void*p,int*){};
};
EOT
test_cxx "whether operator delete can be overloaded in same class" "ok" "no" ""
AC_DEFINE_UNQUOTED(CMK_MULTIPLE_DELETE, $strictpass)

################### Syscalls and Libraries ###################

#### test for poll ###
cat > $t <<EOT
#include <poll.h>
void foo(void) { 
  struct pollfd pos[[3]];
  poll(pos, 1, 1);
}
EOT
test_cxx "whether the poll() syscall exists" "yes" "no" ""
AC_DEFINE_UNQUOTED(CMK_USE_POLL, $pass)

#### check if dlopen works ####
cat > $t <<EOT
#include "ckdll_dlopen.C"
int main() {
	CkDll dll("foo.so");
	return 0;
}
EOT
test_link "whether dlopen links without -ldl" "yes" "no" ""
noldl=$pass
test_link "whether dlopen links with -ldl" "yes" "no" "-ldl"
if test $pass -eq 1
then 
#dlopen requires -ldl: add it to our link line
	cat >> ./conv-mach-opt.sh << EOT

# Option added by configure script's dlopen section
CMK_LIBS="\$CMK_LIBS -ldl"

EOT
fi

if test $pass -eq 1 -o $noldl -eq 1
then
# One version or another of dlopen worked: compile it in
	AC_DEFINE_UNQUOTED(CMK_DLL_USE_DLOPEN, 1)
fi


#### check if getProcAddress works ####
cat > $t <<EOT
#include "ckdll_win32.C"
EOT
test_cxx "whether getProcAddress works" "yes" "no" ""
AC_DEFINE_UNQUOTED(CMK_DLL_USE_WIN32, $pass)


#### check if mmap exists ####
cat > $t <<EOT
#include <sys/mman.h>

void *foo(void *a,int l,int fd) {
	return mmap(a,l,PROT_READ+PROT_WRITE,
                 MAP_FIXED+MAP_PRIVATE,fd,0);
}
EOT
test_cxx "whether the mmap() syscall exists" "yes" "no" ""
AC_DEFINE_UNQUOTED(CMK_HAS_MMAP, $pass)

#### check if mmap accepts MAP_ANON ####
cat > $t <<EOT
#include <sys/mman.h>

void *foo(void *a,int l) {
	return mmap(a,l,PROT_READ+PROT_WRITE,
                MAP_FIXED+MAP_PRIVATE+MAP_ANON,-1,0);
}
EOT
test_cxx "whether mmap() accepts MAP_ANON" "yes" "no" ""
AC_DEFINE_UNQUOTED(CMK_HAS_MMAP_ANON, $pass)

#### check if glibc backtrace exists ####
cat > $t <<EOT
#include "cmibacktrace.c"

int main() {
	int nLevels;
	char **stack=CmiBacktrace(&nLevels);
	return 0;
}
EOT
TRACE_LINK_FLAG="-rdynamic"
test_link "whether glibc backtrace works" "yes" "no" "-DCMK_USE_BACKTRACE=1 $TRACE_LINK_FLAG"
AC_DEFINE_UNQUOTED(CMK_USE_BACKTRACE, $pass)

if test $pass -eq 1
then 
cat >> ./conv-mach-opt.sh << EOT

# Option added by configure script's backtrace section
CMK_LD="\$CMK_LD $TRACE_LINK_FLAG"
CMK_LDXX="\$CMK_LDXX $TRACE_LINK_FLAG"

EOT
fi


#### test if has zlib ####
cat > $t <<EOT
#include <zlib.h>
int main() { 
  gzFile f = gzopen("/tmp/x","r");
  gzprintf(f, "test...\n");
  gzclose(f);
  return 0;
}
EOT
test_link "whether it has zlib" "yes" "no" "-lz"
AC_DEFINE_UNQUOTED(CMK_PROJECTIONS_USE_ZLIB, $pass)
if test $pass -eq 1
then 
cat >> ./conv-mach-opt.sh << EOT

# Option added by configure script's zlib section
CMK_LIBS="\$CMK_LIBS -lz"

EOT
fi

################## Fortran #########################

### test fortran subroutine name ###
FCC=`echo $CMK_CF90 | cut -d' ' -f1`

AC_CHECK_PROG(FCL, "$FCC", "$FCC" )
if test -n "$FCL"
then
  AC_MSG_CHECKING(subroutine name used by Fortran compiler)
  AC_CACHE_VAL(fortran_postfix,
  cat > conftest.f <<EOF
      SUBROUTINE FOO_FOO
      END
EOF
  $CMK_CF90 -c conftest.f > /dev/null 2> /dev/null

  NAME=`nm conftest.o | grep "foo_foo__"`
  if test "$NAME" != ""
  then
    fortran_postfix=TWOSCORE
    AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_TWOSCORE, 1)
  else
    NAME=`nm conftest.o | grep "foo_foo_"`
    if test "$NAME" != ""
    then
      fortran_postfix=ONESCORE
      AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ONESCORE, 1)
    else
      NAME=`nm conftest.o | grep "foo_foo"`
      if test "$NAME" != ""
      then
        fortran_postfix=NOSCORE
        AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_NOSCORE, 1)
      else
        NAME=`nm conftest.o | grep "FOO_FOO"`
        if test "$NAME" != ""
        then
          fortran_postfix=ALLCAPS
          AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ALLCAPS, 1)
        else
          echo "#################################################"
          echo "FORTRAN compiler generated name not supported yet"
          echo "#################################################"
        fi
      fi
    fi
  fi
  rm -f conftest.f conftest.o
  )
  AC_MSG_RESULT($fortran_postfix)
fi


### go get libpthread.a from charm website ###
if test "$base_version" = "net-linux" || test "$base_version" = "mpi-linux"
then
case $version in
*linux*smp*|*linux*vmi*)
  if test ! -r ../lib/libpthread.a
  then
    AC_CHECK_PROG(WGET, wget, wget )
    AC_CHECK_PROG(LYNX, lynx, lynx )
    AC_CHECK_PROG(TELNET, telnet, telnet )
    AC_CHECK_PROG(UUDECODE, uudecode, uudecode )
    
    CHARMIP='128.174.241.207'
#    CHARMIP='charm.cs.uiuc.edu'
#    VERSION=`nm /lib/libc.so.6 | grep "A GLIBC_" | tail -1 | sed -e "s/00000000 A GLIBC_//g"`
    get_glibc_version
    L="libpthread-$GLIBCVERSION.a"
    URL="http://${CHARMIP}/distrib/$L"
    finish=0
    printf "getting $L from $URL ..."
    if test -n "$WGET"
    then
      printf "(wget) ..."
      $WGET $URL > /dev/null 2>&1  && mv $L ../lib && finish=1
    fi
    if test $finish = 0 && test -n "$LYNX"
    then
      printf "(lynx) ..."
      $LYNX -source $URL > $L 2>/dev/null 
      if file -L $L | grep 'archive' > /dev/null
      then
        mv $L ../lib && finish=1
      fi
    fi
    if test $finish = 0 && test -n "$TELNET" && test -n "$UUDECODE"
    then
      printf "(telnet) ..."
      cat > get_libpthread <<EOT
#! /bin/sh
echo "GET /distrib/libpthread-$GLIBCVERSION.uu 1.0"
echo
# exit normally when the telnet session closes.
trap "exit 0" 13
while : ; do
 echo
 sleep 1
done
EOT
      /bin/sh ./get_libpthread | ($TELNET $CHARMIP 80 > .uulib 2>/dev/null); $UUDECODE .uulib 2>/dev/null && rm -f .uulib && mv $L ../lib && finish=1
    fi
    ln -s $L ../lib/libpthread.a
    if test $finish = 0 || test ! -r ../lib/libpthread.a
    then
      /bin/rm -f ../lib/libpthread.a
      echo "failed"
      echo "#####################################################################"
      echo "wget, lynx or telnet must be installed to get libpthread.a from charm website."
      echo "Alternately, your version of GLIBC ($GLIBCVERSION) is not yet supported--"
      echo " contact ppl@cs.uiuc.edu for assistance."
      echo "#####################################################################"
      exit 1
    else
      echo "done"
    fi
  fi
  ;;
esac
fi

AC_OUTPUT()
