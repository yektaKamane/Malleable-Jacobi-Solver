
AC_INIT(./Makefile)

AC_CONFIG_HEADER(conv-autoconfig.h)

test -r ./conv-mach-pre.sh && . ./conv-mach-pre.sh

if test ! -r ./conv-mach.sh 
then
        echo "Cannot find ./conv-mach.sh"
        exit 1
fi
. ./conv-mach.sh

test -r ./conv-mach-opt.sh && . ./conv-mach-opt.sh

VERSION=050405
AC_DEFINE_UNQUOTED(CHARM_VERSION, $VERSION)

AC_MSG_CHECKING(machine name)
version=`pwd | awk -F/ '{print $(NF-1)}'`
base_version=`cat .vdir`
AC_DEFINE_UNQUOTED(CMK_MACHINE_NAME, "$version")
AC_MSG_RESULT($version)

t="test.cpp"

# Test: tries to compile C++ file $t (described by $1).
#  If successful, prints $2 and sets $pass/clears $fail
#  If failure, prints $3 and sets $pass/clears $fail
test_cxx() {
        AC_MSG_CHECKING("$1")
	$CMK_CXX -I../include -c $t -o test.o > out 2>&1
	if test $? -eq 0
	then
                AC_MSG_RESULT("$2")
		pass="1"
		fail="0"
	else
                AC_MSG_RESULT("$3")
		pass="0"
		fail="1"
	fi
 	strictpass=$pass
	strictfail=$fail
        if test $pass -eq 1
	then 
 	  if cat out | grep -i "warn" > /dev/null 2>&1
	  then 
	    strictpass="0" && strictfail="1"
          fi
        fi
	/bin/rm -f out
}

test_finish() {
	rm -f $t test.o	> /dev/null 2>&1
	/bin/rm -f out
	exit $1
}

cat > $t <<EOT
#include <stdio.h>
void foo(void) {
	printf("Hello, world!\n");
}
EOT
echo "set C++ compiler as: $CMK_CXX"
test_cxx "whether C++ compiler works" "ok" "no"
if test $fail -eq 1
then
	echo "Cannot compile C++ programs with $CMK_CXX"
	echo " (check your charm++ version)"
	test_finish 1
fi


# Perform the tests

cat > $t <<EOT
#include <stdlib.h>
bool foo(void) { return true; }
EOT
test_cxx "whether C++ bool works" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_BOOL_DEFINED, $pass)
AC_DEFINE_UNQUOTED(CMK_BOOL_UNDEFINED, $fail)

#### check explicit ####
cat > $t <<EOT
#include <stdlib.h>
class er {
 protected:
   explicit er(unsigned int inType) {};
};
EOT
test_cxx "whether C++ class explicit keyword works" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_EXPLICIT, $pass)

#### check if signed char is same as char ####
cat > $t <<EOT
#include <stdlib.h>
class er {
 protected:
   void operator()(char &v,const char *desc=NULL) {};
   void operator()(signed char &v,const char *desc=NULL) {};
};
EOT
test_cxx "whether C++ signed char and char differ" "yes" "no"
AC_DEFINE_UNQUOTED(CMK_SIGNEDCHAR_DIFF_CHAR, $pass)

cat > $t <<EOT
int foo(float *t) {return *reinterpret_cast<int *>(t);}
EOT
test_cxx "whether C++ *_casts<> work" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_CPP_CAST_LEGAL, $pass)
AC_DEFINE_UNQUOTED(CMK_CPP_CAST_ILLEGAL, $fail)


cat > $t <<EOT
typedef void (*func_t)(void);
class foo_foo {
protected:
        int len;
};
class foo: public foo_foo {
public:
	template<func_t f> //Templated member function
	void memb(void) {f(); len++;}
};
inline void fn() {}
void myfunc()
{
  foo x;
  x.template memb<fn>();
}
EOT
test_cxx "whether templated member functions work" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_TEMPLATE_MEMBERS_BROKEN, $fail)


cat > $t <<EOT
#include <iostream>
void foo(void) {}
EOT
test_cxx "whether including STL <foo> works" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_STL_USE_DOT_H, $fail)
AC_DEFINE_UNQUOTED(CMK_STL_DONT_USE_DOT_H, $pass)

cat > $t <<EOT
namespace foo {
	int x;
};
EOT
test_cxx "whether namespaces work" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_NAMESPACES_BROKEN, $fail)


cat > $t <<EOT
#include <typeinfo>
const char *foo(void) {
	int x;
	return typeid(x).name();
}
EOT
test_cxx "whether typeinfo/typeid works" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_HAS_TYPEINFO, $pass)

cat > $t <<EOT
namespace foo {
	int x;
};
EOT
test_cxx "whether namespaces work" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_NAMESPACES_BROKEN, $fail)


#test if we can have multiple delete like this
cat > $t <<EOT
class foo {
public:
  void operator delete(void*p){};
  void operator delete(void*p,int*){};
};
EOT
test_cxx "whether operator delete can be overloaded in same class" "ok" "no"
AC_DEFINE_UNQUOTED(CMK_MULTIPLE_DELETE, $strictpass)

#test if has poll
cat > $t <<EOT
#include <poll.h>
void foo(void) { 
  struct pollfd pos[[3]];
  poll(pos, 1, 1);
}
EOT
test_cxx "whether it has poll" "yes" "no"
AC_DEFINE_UNQUOTED(CMK_USE_POLL, $pass)

#test if has sys/mman.h
cat > $t <<EOT
#include <sys/types.h>
#include <sys/mman.h>
void foo(void) { 
}
EOT
test_cxx "whether it has sys/mman.h" "yes" "no"
AC_DEFINE_UNQUOTED(CMK_HAS_MMAN_H, $pass)

#test fortran subroutine name
FCC=`echo $CMK_CF90 | cut -d' ' -f1`

AC_CHECK_PROG(FCL, "$FCC", "$FCC" )
if test -n "$FCL"
then
  AC_MSG_CHECKING(subroutine name used by Fortran compiler)
  AC_CACHE_VAL(fortran_postfix,
  cat > conftest.f <<EOF
      SUBROUTINE FOO_FOO
      END
EOF
  $FCC -c conftest.f > /dev/null 2> /dev/null

  NAME=`nm conftest.o | grep "foo_foo__"`
  if test "$NAME" != ""
  then
    fortran_postfix=TWOSCORE
    AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_TWOSCORE, 1)
  else
    NAME=`nm conftest.o | grep "foo_foo_"`
    if test "$NAME" != ""
    then
      fortran_postfix=ONESCORE
      AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ONESCORE, 1)
    else
      NAME=`nm conftest.o | grep "foo_foo"`
      if test "$NAME" != ""
      then
        fortran_postfix=NOSCORE
        AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_NOSCORE, 1)
      else
        NAME=`nm conftest.o | grep "FOO_FOO"`
        if test "$NAME" != ""
        then
          fortran_postfix=ALLCAPS
          AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ALLCAPS, 1)
        else
          echo "#################################################"
          echo "FORTRAN compiler generated name not supported yet"
          echo "#################################################"
        fi
      fi
    fi
  fi
  rm -f conftest.f conftest.o
  )
  AC_MSG_RESULT($fortran_postfix)
fi


#go get libpthread.a from charm website
if test "$base_version" = "net-linux" || test "$base_version" = "mpi-linux"
then
case $version in
*linux*smp*|*linux*vmi*)
  if test ! -r ../lib/libpthread.a
  then
    AC_CHECK_PROG(WGET, wget, wget )
    AC_CHECK_PROG(LYNX, lynx, lynx )
    AC_CHECK_PROG(TELNET, telnet, telnet )
    AC_CHECK_PROG(UUDECODE, uudecode, uudecode )
    
    CHARMIP='128.174.241.211'
#    CHARMIP='charm.cs.uiuc.edu'
    VERSION=`nm /lib/libc.so.6 | grep "A GLIBC_" | tail -1 | sed -e "s/00000000 A GLIBC_//g"`
    L="libpthread-$VERSION.a"
    URL="http://${CHARMIP}/distrib/$L"
    finish=0
    printf "getting $L from $URL ..."
    if test -n "$WGET"
    then
      printf "(wget) ..."
      $WGET $URL > /dev/null 2>&1  && mv $L ../lib && finish=1
    fi
    if test $finish = 0 && test -n "$LYNX"
    then
      printf "(lynx) ..."
      $LYNX -source $URL > $L 2>/dev/null && mv $L ../lib && finish=1
    fi
    if test $finish = 0 && test -n "$TELNET" && test -n "$UUDECODE"
    then
      printf "(telnet) ..."
      cat > get_libpthread <<EOT
#! /bin/sh
echo "GET /distrib/libpthread-$VERSION.uu 1.0"
echo
# exit normally when the telnet session closes.
trap "exit 0" 13
while : ; do
 echo
 sleep 1
done
EOT
      /bin/sh ./get_libpthread | ($TELNET $CHARMIP 80 > .uulib 2>/dev/null); $UUDECODE .uulib 2>/dev/null && rm -f .uulib && mv $L ../lib && finish=1
    fi
    ln -s $L ../lib/libpthread.a
    if test $finish = 0 || test ! -r ../lib/libpthread.a
    then
      /bin/rm -f ../lib/libpthread.a
      echo "failed"
      echo "#####################################################################"
      echo "wget, lynx or telnet must be installed to get libpthread.a from charm website."
      echo "Alternately, your version of GLIBC ($VERSION) is not yet supported--"
      echo " contact ppl@cs.uiuc.edu for assistance."
      echo "#####################################################################"
      exit 1
    else
      echo "done"
    fi
  fi
  ;;
esac
fi

AC_OUTPUT()
