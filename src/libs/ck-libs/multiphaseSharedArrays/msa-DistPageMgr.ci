// emacs mode line -*- mode: c++; tab-width: 4 -*-
// this file defines the interfaces for all the type independent
// entities in the distributed array implementation
module msa
{
    // this is the per processor cache of pages.
    template<class ENTRY_TYPE, class ENTRY_OPS_CLASS> group CacheGroup
    {
        entry CacheGroup(unsigned int nPages, unsigned int bytesPerPage, CkArrayID pageArrayID,
                              unsigned int max_bytes, unsigned int nEntries, unsigned int numberOfWorkerThreads);
        entry void AckRLEPage(unsigned int numReceived);
        entry void ReceivePage(unsigned int page, char pageData[bpp], int isEmpty, int bpp);
        entry void enroll(unsigned int numberOfWorkerThreads);
        entry void enrollAck();  // internal method
        entry void enrollDone();  // internal mathod
        entry void SyncAck();
        entry void SyncDone();
        entry void emit(int offset);
    };

    // this array is the storage for the pages. It in effect
    // virtualizes the storage for the pages
    template<class ENTRY_TYPE, class ENTRY_OPS_CLASS> array[1D] PageArray
    {
        entry PageArray(void);
        entry void GetPage(CProxy_CacheGroup<ENTRY_TYPE, ENTRY_OPS_CLASS> cache, int pe, unsigned int bytesPerPage);
        entry void ReceiveRLEPage(char buffer[size], unsigned int size, unsigned int bytesPerPage, CProxy_CacheGroup<ENTRY_TYPE, ENTRY_OPS_CLASS> cache, int pe, int pageState);
        entry void Sync();
        entry void emit(int offset);
    };

    group CacheGroup<double, DefaultEntry<double> >;
    array [1D] PageArray<double, DefaultEntry<double> >;
};
