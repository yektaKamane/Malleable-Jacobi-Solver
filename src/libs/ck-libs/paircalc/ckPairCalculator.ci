module ckPairCalculator {
	readonly ComlibInstanceHandle mcastInstanceCP;

	message partialResultMsg  {
	  complex result[];
	};

	message priorSumMsg  {
	  complex result[];
	};

	message mySendMsg  {
	  complex data[];
	};

	message calculatePairsMsg  {
	  complex points[];
	};
	message acceptResultMsg  {
	  double matrix[];
	};

	message acceptResultMsg2  {
	  double matrix1[];
	  double matrix2[];
	};


	array [4D] PairCalculator {
 		entry PairCalculator(bool, int, int, int, int op1, FuncType fn1, int op2, FuncType fn2, CkCallback cb, CkGroupID gid, CkArrayID final_callbackid, int final_callback_ep, bool conserveMemory, bool lbpaircalc, CkCallback lbcb, bool machreduce);
   		entry void lbsync();

   		entry void calculatePairs(int size, complex points[size], int, bool, bool);
   		entry [nokeep] void calculatePairs_gemm(calculatePairsMsg *msg);
		entry void acceptResult(int size, double matrix[size]);

		entry  void acceptResult(int size, double matrix1[size], double matrix2[size]);

		entry [nokeep,inline] void acceptResult(acceptResultMsg *msg);
		entry [nokeep,inline] void acceptResult(acceptResultMsg2 *msg);
	  	entry void sumPartialResult(int size, complex result[size], int offset);
	  	entry void sumPartialResult(partialResultMsg *msg);
	  	entry void sumPartialResult(priorSumMsg *msg);
	};

	group PairCalcReducer {
		entry PairCalcReducer();
		entry void clearRegister();
		entry void broadcastEntireResult(int size, double matrix[size], bool symmtype);	
		entry void broadcastEntireResult(int size, double matrix1[size], double matrix2[size], bool symmtype);			
		entry void startMachineReduction(void);
	};


}
