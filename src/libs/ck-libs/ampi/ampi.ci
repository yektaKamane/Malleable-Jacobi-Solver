module ampi {
  message AmpiMsg;
 
  initnode void ampiNodeInit(void);
  initproc void ampiProcInit(void);

  array[1D] ampiParent {
    entry ampiParent(int universeNo,CProxy_TCharm threads_,ComlibInstanceHandle comlib_);
    entry void ResumeThread();
    entry void Checkpoint(int len, char dname[len]);
  };
  array[1D] ampi {
    entry ampi();
    entry ampi(CkArrayID parent_,ampiCommStruct s);
    entry void generic(AmpiMsg *);
    entry void reduceResult(CkReductionMsg *m);
    entry void splitPhase1(CkReductionMsg *msg);
    entry void commCreatePhase1(CkReductionMsg *msg);
  };
  group ampiWorlds {
    entry ampiWorlds();
    entry ampiWorlds(ampiCommStruct nextWorld);
    entry void add(ampiCommStruct nextWorld);
  };
};
