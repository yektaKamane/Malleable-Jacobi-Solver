module ampi {
  message AmpiMsg;
 
  initcall void ampiNodeInit(void);
  readonly mpi_comm_worlds mpi_worlds;
  readonly int mpi_nworlds;

  array[1D] ampiParent {
    entry ampiParent(int universeNo,CProxy_TCharm threads_);
    entry void checkpoint(int len, char dname[len]);
    entry void restart(int len, char dname[len]);
  };
  array[1D] ampi {
    entry ampi();
    entry ampi(CkArrayID parent_,ampiCommStruct s);
    entry void generic(AmpiMsg *);
    entry void reduceResult(CkReductionMsg *m);
    entry void splitPhase1(CkReductionMsg *msg);
    entry void commCreatePhase1(CkReductionMsg *msg);
    entry void checkpoint(int len, char dname[len]);
    entry void restart(int len, char dname[len]);
    entry void checkpointthread(int len, char dname[len]);
    entry void restartthread(int len, char dname[len]);
  };
};
