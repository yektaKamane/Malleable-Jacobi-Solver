// Triangular Mesh Refinement & Coarsening Framework - 2D (TMRC2D)
// Created by: Terry L. Wilmarth

module refine {
  // ----------------------------- Messages ---------------------------------
  message chunkMsg;
  message splitOutMsg;
  message refMsg; 
  message intMsg;
  message doubleMsg;

  // ------------------------ Global Read-only Data -------------------------
  readonly CProxy_chunk mesh;
  initproc void refineChunkInit(void);

  // ---------------------------- Chare Arrays ------------------------------
  array [1D] chunk {
    entry chunk(chunkMsg *);
    entry void addRemoteEdge(int, int, edgeRef);
    entry void refineElement(int, double);
    entry [threaded] void refiningElements();	
    entry void coarsenElement(int, double);
    entry [threaded] void coarseningElements();	
    entry [sync] void setBorder(int);
    entry [sync] intMsg *safeToMoveNode(int, double, double);
    entry [sync] splitOutMsg *split(int, elemRef, node, node);
    entry [sync] void collapseHelp(int, edgeRef, node, node);
    entry void checkPending(int, objRef);
    entry void checkPending(int, objRef, objRef);
    entry [sync] void updateElement(int, objRef, objRef);
    entry [sync] void updateElementEdge(int, objRef, objRef);
    entry void updateReferences(int, objRef, objRef);
    entry [sync, threaded] doubleMsg *getArea(int);
    entry [sync] void resetEdge(int);
    entry [sync] intMsg *lockNode(int);
    entry [sync] void unlockNode(int);
    entry [sync] refMsg *getNbr(int, objRef);
    entry [sync] void setTargetArea(int, double);
    entry [sync] void resetTargetArea(int, double);
    entry void reportPos(int, double, double);
    entry [sync, threaded] void print();
    entry [sync, threaded] void out_print();
    entry void deriveBorderNodes();
    entry void tweakMesh();
    entry void improveChunk();
    entry [sync, threaded] void improve();
    entry [sync] intMsg *addNode(node n);
    entry [sync] void removeNode(int);
    entry [sync] void removeEdge(int);
    entry [sync] void removeElement(int);
  };
};
