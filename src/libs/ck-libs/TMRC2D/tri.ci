// Triangular Mesh Refinement & Coarsening Framework - 2D (TMRC2D)
// Created by: Terry L. Wilmarth

module refine {
  // ----------------------------- Messages ---------------------------------
  message chunkMsg;
  message nodeMsg;
  message edgeMsg;
  message remoteEdgeMsg;
  message elementMsg;
  message femElementMsg;
  message ghostElementMsg;
  message refineMsg;
  message coarsenMsg;
  message collapseMsg;
  message splitInMsg;
  message splitOutMsg;
  message updateMsg;
  message specialRequestMsg;
  message specialResponseMsg;
  message refMsg; 
  message drefMsg; 
  message edgeUpdateMsg;
  message intMsg;
  message doubleMsg;

  // ------------------------ Global Read-only Data -------------------------
  readonly CProxy_chunk mesh;
  initproc void refineChunkInit(void);

  // ---------------------------- Chare Arrays ------------------------------
  array [1D] chunk {
/*
    entry chunk();
    entry chunk(intMsg *);
*/
    entry chunk(chunkMsg *);
    entry void addRemoteEdge(remoteEdgeMsg *);
    entry void refineElement(refineMsg *);
    entry [threaded] void refiningElements();	
    entry void coarsenElement(coarsenMsg *);
    entry [threaded] void coarseningElements();	
    entry [sync] nodeMsg *getNode(intMsg *);
    entry [sync] refMsg *getEdge(collapseMsg *);
    entry [sync] void setBorder(intMsg *);
    entry [sync] intMsg *safeToMoveNode(nodeMsg *);
    entry [sync] splitOutMsg *split(splitInMsg *);
    entry [sync] void collapseHelp(collapseMsg *);
    entry void checkPending(refMsg *);
    entry void checkPending(drefMsg *);
    entry [sync] void updateElement(updateMsg *);
    entry [sync] void updateElementEdge(updateMsg *);
    entry void updateReferences(updateMsg *);
    entry [sync, threaded] doubleMsg *getArea(intMsg *);
    entry [sync, threaded] nodeMsg *midpoint(intMsg *);
    entry [sync] intMsg *setPending(intMsg *);
    entry [sync] void unsetPending(intMsg *);
    entry [sync] intMsg *isPending(intMsg *);
    entry [sync] intMsg *lockNode(intMsg *);
    entry [sync] void unlockNode(intMsg *);
    entry [sync, threaded] intMsg *isLongestEdge(refMsg *);
    entry [sync] refMsg *getNeighbor(refMsg *);
    entry [sync] refMsg *getNotNode(refMsg *);
    entry [sync] refMsg *getNotElem(refMsg *);
    entry [sync] void setTargetArea(doubleMsg *);
    entry [sync] void resetTargetArea(doubleMsg *);
    entry [sync] void updateEdges(edgeUpdateMsg *);
    entry [sync] void updateNodeCoords(nodeMsg *);
    entry void reportPos(nodeMsg *);
    entry [sync, threaded] void print();
    entry [sync, threaded] void out_print();
    entry void freshen();
    entry void deriveBorderNodes();
    entry void tweakMesh();
    entry void improveChunk();
    entry [sync, threaded] void improve();
 
    entry void addNode(nodeMsg *);
    entry void addEdge(edgeMsg *);
    entry void addElement(elementMsg *);
    entry [sync] void removeNode(intMsg *);
    entry [sync] void removeEdge(intMsg *);
    entry [sync] void removeElement(intMsg *);
    entry [sync] void updateNode(updateMsg *);
  };
};
