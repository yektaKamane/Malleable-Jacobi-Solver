mainmodule parallelJacobi {

    message Msg{
	double strip[];	
    };

    message MaxMsg;
    message VoidMsg;

    mainchare Main {
        entry Main(CkArgMsg *m);
	//entry void isFinished(int clientNo);
    };

    readonly CProxy_Main globalMainProxy;
    readonly CProxy_Chunk chunk_arr;
    readonly int numFinished;

   array[1D] Chunk{

	entry Chunk(int,int,int);
        entry void getStripfromleft(Msg* aMessage);
        entry void getStripfromright(Msg* aMessage);	
	entry void processStripfromleft(Msg* aMessage);
	entry void processStripfromright(Msg* aMessage);
	entry void startWork();
	
	entry void singleStep(VoidMsg* msg){
		atomic{	 		
			/*delete msg;*/ 
			startWork();
		}
		overlap{
			when getStripfromleft(Msg *aMessage){
				atomic {processStripfromleft(aMessage);}
			}
			when getStripfromright(Msg *aMessage){
				atomic{processStripfromright(aMessage);}
			}
		}
		atomic{
			doWork();
			if(iterations == 3)
				{ /*BgPrint0("Real Iter: %e\n"); */}
			else
				thisProxy[thisIndex].singleStep(new VoidMsg);
			testEnd();

		}
		};
     };

};




