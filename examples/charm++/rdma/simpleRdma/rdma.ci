mainmodule simpleRdma {

  readonly int numElements;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void done();
  };

  array [1D] rdmaObject{
    entry rdmaObject();
    entry void testRdma(CProxy_Main mProxy);
    entry void rdmaSent(CkDataMsg *msg);
    entry void send(int n1, int ptr1[n1], int n2, double ptr2[n2], int n3, char ptr3[n3]);
    entry void rdmaSend(int n1, rdma int ptr1[n1], int n2, rdma double ptr2[n2], int n3, rdma char ptr3[n3]);
    entry void mixedSend(int n1, int ptr1[n1], int n2, rdma double ptr2[n2], int n3, rdma int ptr3[n3], int n4, double ptr4[n4]);

    entry void sdagRun() {
      serial {
        // send num arrays to its partner
        for(int i = 1; i <= num; i++)
          thisProxy[destIndex].sdagRecv(iter, iSize1, rdma(iArr1, sdagCb), dSize2, rdma(dArr2, sdagCb));
      }

      // wait for num arrays from partner
      for (j = 1; j <= num; j++){
        when sdagRecv[iter] (int iter, int n1, rdma int ptr1[n1], int n2, rdma double ptr2[n2]){
          serial {
            // increment counter on receiving a sdagRecv
            sdagRdmaRecvCounter++;
            compareArray(ptr1, iArr1, n1);
            compareArray(ptr2, dArr2, n2);

            // check that all sends and recvs have completed and then advance
            if(sdagRdmaSentCounter == 2*num && sdagRdmaRecvCounter == num)
              nextStep();
          }
        }
      }
    }

    entry void sdagRdmaSent(CkDataMsg *msg);
    entry void sdagRecv(int iter, int n1, rdma int ptr1[n1], int n2, rdma double ptr2[n2]);
  };

}
